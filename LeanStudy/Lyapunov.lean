import Mathlib.Analysis.InnerProductSpace.Basic
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Data.Real.Basic
import Mathlib.Data.Matrix.Basic
import Mathlib.Data.Fintype.Basic
import Mathlib.Tactic.FinCases
import Mathlib.Analysis.SpecialFunctions.Exp
import Mathlib.Analysis.SpecialFunctions.ExpDeriv
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
import Mathlib.Analysis.ODE.Gronwall
import Mathlib.Analysis.ODE.PicardLindelof
import Mathlib.Analysis.Calculus.Deriv.Slope
import Mathlib.Topology.Basic
import Mathlib.MeasureTheory.Function.L2Space
import Mathlib.MeasureTheory.Integral.IntervalIntegral.Basic
import Mathlib.MeasureTheory.Integral.IntervalIntegral.FundThmCalculus
import Mathlib.MeasureTheory.Integral.IntervalIntegral.IntegrationByParts
import Mathlib.Analysis.Calculus.Gradient.Basic
import Mathlib.Analysis.InnerProductSpace.Dual

noncomputable section
open scoped Topology
open Metric

variable {n : ‚Ñï}
abbrev E n := EuclideanSpace ‚Ñù (Fin n)

/-- (Lyapunov) Stability of the flow `x` at equilibrium `x‚ÇÄ`. -/
def isStable (x : E n ‚Üí ‚Ñù ‚Üí E n) (x‚ÇÄ : E n) : Prop :=
  ‚àÄ ‚¶ÉŒµ‚¶Ñ, 0 < Œµ ‚Üí ‚àÉ Œ¥ > 0, ‚àÄ ‚¶Éx0‚¶Ñ, dist x0 x‚ÇÄ < Œ¥ ‚Üí ‚àÄ ‚¶Ét‚¶Ñ, 0 ‚â§ t ‚Üí dist (x x0 t) x‚ÇÄ < Œµ

/--
A minimal Lyapunov package sufficient for Lyapunov (not asymptotic) stability:

* `cont` : `V` is continuous
* `zero_at` : `V x‚ÇÄ = 0`
* `nonincreasing` : `t ‚Ü¶ V (x x0 t)` is nonincreasing for every initial condition `x0`
* `init` : the flow starts at the initial condition
* `sublevel_small` : small sublevel sets of `V` sit inside any prescribed Œµ-ball around `x‚ÇÄ`
  (this follows from `cont` + strict local minimum at `x‚ÇÄ`; you can also assume it directly).
-/
structure isLyapunovFunction (V : E n ‚Üí ‚Ñù) (f : E n ‚Üí E n) (x : E n ‚Üí ‚Ñù ‚Üí E n) (x‚ÇÄ : E n) where
  cont : Continuous V
  zero_at : V x‚ÇÄ = 0
  nonincreasing :
    ‚àÄ x0 {t‚ÇÅ t‚ÇÇ}, 0 ‚â§ t‚ÇÅ ‚Üí t‚ÇÅ ‚â§ t‚ÇÇ ‚Üí V (x x0 t‚ÇÇ) ‚â§ V (x x0 t‚ÇÅ)
  init : ‚àÄ x0, x x0 0 = x0
  sublevel_small :
    ‚àÄ {Œµ}, 0 < Œµ ‚Üí ‚àÉ Œ± > 0, {y : E n | V y ‚â§ Œ±} ‚äÜ ball x‚ÇÄ Œµ

/-- (Lyapunov‚Äôs 2nd theorem ‚Äî stability) If `V` is a Lyapunov function in the above sense,
then the equilibrium `x‚ÇÄ` is (Lyapunov) stable. -/
theorem lyapunov_second_theorem
  (V : E n ‚Üí ‚Ñù)
  (f : E n ‚Üí E n)
  (x : E n ‚Üí ‚Ñù ‚Üí E n)
  (x‚ÇÄ : E n)
  (h : isLyapunovFunction V f x x‚ÇÄ)
  : isStable x x‚ÇÄ := by
  classical
  intro Œµ hŒµ
  -- 1) Choose a small sublevel {V ‚â§ Œ±} inside the Œµ-ball.
  obtain ‚ü®Œ±, hŒ±pos, hSub‚ü© := h.sublevel_small (Œµ := Œµ) hŒµ
  -- 2) Continuity of V at x‚ÇÄ (with V x‚ÇÄ = 0) ‚Üí close initial states have V ‚â§ Œ±.
  have hcontAt : ContinuousAt (fun y => V y) x‚ÇÄ := h.cont.continuousAt
  have hEV :
      {y : E n | dist (V y) (V x‚ÇÄ) < Œ±} ‚àà ùìù x‚ÇÄ :=
    (Metric.tendsto_nhds.mp (h.cont.continuousAt)) Œ± hŒ±pos
  rcases Metric.mem_nhds_iff.mp hEV with ‚ü®Œ¥, hŒ¥pos, hŒ¥‚ü©
  refine ‚ü®Œ¥, hŒ¥pos, ?_‚ü©
  intro x0 hx0 t ht
  have hx0V : V x0 ‚â§ Œ± := by
    have hx0_ball : x0 ‚àà ball x‚ÇÄ Œ¥ := by simpa [mem_ball] using hx0
    have hx0dist : dist (V x0) (V x‚ÇÄ) < Œ± := hŒ¥ hx0_ball
    have hx0abs  : |V x0 - V x‚ÇÄ| < Œ± := by simpa [Real.dist_eq] using hx0dist
    have hx0abs0 : |V x0| < Œ± := by simpa [h.zero_at, sub_zero] using hx0abs
    exact (abs_lt.1 hx0abs0).2.le
  -- 3) Along trajectories V is nonincreasing and x x0 0 = x0.
  have hmono := h.nonincreasing x0 (t‚ÇÅ := 0) (t‚ÇÇ := t) (by exact le_of_eq rfl) ht
  have : V (x x0 t) ‚â§ V (x x0 0) := hmono
  have : V (x x0 t) ‚â§ V x0 := by simpa [h.init x0] using this
  have : V (x x0 t) ‚â§ Œ± := this.trans hx0V
  -- 4) Sublevel inclusion gives the metric bound.
  have : x x0 t ‚àà ball x‚ÇÄ Œµ := hSub this
  simpa [mem_ball] using this
